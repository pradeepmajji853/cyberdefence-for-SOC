{"ast":null,"code":"const API_BASE_URL = 'http://localhost:8000';\nexport const api = {\n  async getLogs(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await fetch(`${API_BASE_URL}/logs?${queryString}`);\n    if (!response.ok) throw new Error('Failed to fetch logs');\n    return response.json();\n  },\n  async createLog(logEntry) {\n    const response = await fetch(`${API_BASE_URL}/logs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(logEntry)\n    });\n    if (!response.ok) throw new Error('Failed to create log');\n    return response.json();\n  },\n  async getAnalysis(hoursBack = 2) {\n    const response = await fetch(`${API_BASE_URL}/analysis?hours_back=${hoursBack}`);\n    if (!response.ok) throw new Error('Failed to get analysis');\n    return response.json();\n  },\n  async chat(question) {\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        question\n      })\n    });\n    if (!response.ok) throw new Error('Failed to get chat response');\n    return response.json();\n  },\n  async getStats() {\n    const response = await fetch(`${API_BASE_URL}/stats`);\n    if (!response.ok) throw new Error('Failed to get stats');\n    return response.json();\n  }\n};\nexport default api;","map":{"version":3,"names":["API_BASE_URL","api","getLogs","params","queryString","URLSearchParams","toString","response","fetch","ok","Error","json","createLog","logEntry","method","headers","body","JSON","stringify","getAnalysis","hoursBack","chat","question","getStats"],"sources":["/Users/majjipradeepkumar/Downloads/haazri/cyber defence/frontend/src/api.js"],"sourcesContent":["const API_BASE_URL = 'http://localhost:8000';\n\nexport const api = {\n  async getLogs(params = {}) {\n    const queryString = new URLSearchParams(params).toString();\n    const response = await fetch(`${API_BASE_URL}/logs?${queryString}`);\n    if (!response.ok) throw new Error('Failed to fetch logs');\n    return response.json();\n  },\n\n  async createLog(logEntry) {\n    const response = await fetch(`${API_BASE_URL}/logs`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(logEntry),\n    });\n    if (!response.ok) throw new Error('Failed to create log');\n    return response.json();\n  },\n\n  async getAnalysis(hoursBack = 2) {\n    const response = await fetch(`${API_BASE_URL}/analysis?hours_back=${hoursBack}`);\n    if (!response.ok) throw new Error('Failed to get analysis');\n    return response.json();\n  },\n\n  async chat(question) {\n    const response = await fetch(`${API_BASE_URL}/chat`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ question }),\n    });\n    if (!response.ok) throw new Error('Failed to get chat response');\n    return response.json();\n  },\n\n  async getStats() {\n    const response = await fetch(`${API_BASE_URL}/stats`);\n    if (!response.ok) throw new Error('Failed to get stats');\n    return response.json();\n  },\n};\n\nexport default api;\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,uBAAuB;AAE5C,OAAO,MAAMC,GAAG,GAAG;EACjB,MAAMC,OAAOA,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACzB,MAAMC,WAAW,GAAG,IAAIC,eAAe,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC;IAC1D,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,SAASI,WAAW,EAAE,CAAC;IACnE,IAAI,CAACG,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMC,SAASA,CAACC,QAAQ,EAAE;IACxB,MAAMN,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,OAAO,EAAE;MACnDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,QAAQ;IAC/B,CAAC,CAAC;IACF,IAAI,CAACN,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,sBAAsB,CAAC;IACzD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMQ,WAAWA,CAACC,SAAS,GAAG,CAAC,EAAE;IAC/B,MAAMb,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,wBAAwBoB,SAAS,EAAE,CAAC;IAChF,IAAI,CAACb,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;IAC3D,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMU,IAAIA,CAACC,QAAQ,EAAE;IACnB,MAAMf,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,OAAO,EAAE;MACnDc,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEI;MAAS,CAAC;IACnC,CAAC,CAAC;IACF,IAAI,CAACf,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;IAChE,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB,CAAC;EAED,MAAMY,QAAQA,CAAA,EAAG;IACf,MAAMhB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGR,YAAY,QAAQ,CAAC;IACrD,IAAI,CAACO,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,qBAAqB,CAAC;IACxD,OAAOH,QAAQ,CAACI,IAAI,CAAC,CAAC;EACxB;AACF,CAAC;AAED,eAAeV,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}